@@ -234,27 +191,23 @@
       family = env->unknown_string();
     }
 
-    o = Object::New(env->isolate());
-    o->Set(env->address_string(), OneByteString(env->isolate(), ip));
-    o->Set(env->netmask_string(), OneByteString(env->isolate(), netmask));
-    o->Set(env->family_string(), family);
-    o->Set(env->mac_string(), FIXED_ONE_BYTE_STRING(env->isolate(), mac));
-
+    result[i * 7] = name;
+    result[i * 7 + 1] = OneByteString(isolate, ip);
+    result[i * 7 + 2] = OneByteString(isolate, netmask);
+    result[i * 7 + 3] = family;
+    result[i * 7 + 4] = FIXED_ONE_BYTE_STRING(isolate, mac);
+    result[i * 7 + 5] =
+      interfaces[i].is_internal ? True(isolate) : False(isolate);
     if (interfaces[i].address.address4.sin_family == AF_INET6) {
       uint32_t scopeid = interfaces[i].address.address6.sin6_scope_id;
-      o->Set(env->scopeid_string(),
-             Integer::NewFromUnsigned(env->isolate(), scopeid));
+      result[i * 7 + 6] = Integer::NewFromUnsigned(isolate, scopeid);
+    } else {
+      result[i * 7 + 6] = no_scope_id;
     }
-
-    const bool internal = interfaces[i].is_internal;
-    o->Set(env->internal_string(),
-           internal ? True(env->isolate()) : False(env->isolate()));
-
-    ifarr->Set(ifarr->Length(), o);
   }
 
   uv_free_interface_addresses(interfaces, count);
-  args.GetReturnValue().Set(ret);
+  args.GetReturnValue().Set(Array::New(isolate, result.data(), result.size()));
 }
 
 
