--- deps/v8/src/base/once.cc	2020-02-06 10:16:42.000000000 +1030
+++ deps/v8/src/base/once.cc	2022-04-05 16:47:01.000000000 +0930
@@ -26,23 +23,23 @@
   //
   // First, try to change the state from UNINITIALIZED to EXECUTING_FUNCTION
   // atomically.
-  state = Acquire_CompareAndSwap(
-      once, ONCE_STATE_UNINITIALIZED, ONCE_STATE_EXECUTING_FUNCTION);
-  if (state == ONCE_STATE_UNINITIALIZED) {
+  uint8_t expected = ONCE_STATE_UNINITIALIZED;
+  if (once->compare_exchange_strong(expected, ONCE_STATE_EXECUTING_FUNCTION,
+                                    std::memory_order_acq_rel)) {
     // We are the first thread to call this function, so we have to call the
     // function.
     init_func();
-    Release_Store(once, ONCE_STATE_DONE);
+    once->store(ONCE_STATE_DONE, std::memory_order_release);
   } else {
     // Another thread has already started executing the function. We need to
     // wait until it completes the initialization.
-    while (state == ONCE_STATE_EXECUTING_FUNCTION) {
+    while (once->load(std::memory_order_acquire) ==
+           ONCE_STATE_EXECUTING_FUNCTION) {
 #ifdef _WIN32
       ::Sleep(0);
 #else
       sched_yield();
 #endif
-      state = Acquire_Load(once);
     }
   }
 }
